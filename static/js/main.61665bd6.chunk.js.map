{"version":3,"sources":["component/img/editar.svg","component/img/cerrar.svg","component/container/addForm.js","component/container/card.js","component/container/editForm.js","component/container/showCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddFormStyled","styled","div","AddForm","props","useForm","register","errors","handleSubmit","onSubmit","data","e","target","reset","addUser","className","name","ref","required","value","message","minLength","task","type","CardStyled","Card","onClick","edition","user","setUserForm","src","edi","width","height","alt","deleteUser","id","cerrar","EditFormStyled","EditForm","defaultValues","currentUser","setValue","updateUser","ShowCardStyled","usersData","uuidv4","ShowCard","useState","users","setUsers","setCurrentUser","deleteById","filter","dataEdit","userEdit","map","key","AppStyled","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.61665bd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/editar.c85cf566.svg\";","module.exports = __webpack_public_path__ + \"static/media/cerrar.5181b95a.svg\";","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst AddFormStyled = styled.div`\r\n  max-width: 400px;\r\n  margin: auto;\r\n  padding: 2em;\r\n  box-sizing: border-box;\r\n  box-shadow: 9px 9px 18px #cbd4dd, -9px -9px 18px #f9ffff;\r\n  h2 {\r\n    font-family: \"Montserrat\", sans-serif;\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n    text-transform: capitalize;\r\n    color: #9badbf;\r\n  }\r\n  .input-field,\r\n  .butonsito {\r\n    position: relative;\r\n    height: 50px;\r\n    width: 100%;\r\n  }\r\n  .input-field {\r\n    margin-bottom: 20px;\r\n  }\r\n  .input-field input {\r\n    border: none;\r\n    padding-left: 15px;\r\n    height: 100%;\r\n    width: 100%;\r\n    outline: 0px;\r\n    background: #e2ebf6;\r\n    box-shadow: inset 5px 5px 6px #d0d8e2, inset -5px -5px 6px #f4feff;\r\n  }\r\n  .mylabel {\r\n    position: absolute;\r\n    top: 30%;\r\n    left: 15px;\r\n    pointer-events: none;\r\n    transform: translateY(-35px);\r\n    font-family: \"Noto Sans\", sans-serif;\r\n    font-size: 13px;\r\n    color: #9badbf;\r\n  }\r\n\r\n  button {\r\n    width: 100%;\r\n    height: 100%;\r\n    border: none;\r\n    color: #87a6cb;\r\n    cursor: pointer;\r\n    background: none;\r\n    font-family: \"Montserrat\", sans-serif;\r\n    font-size: 20px;\r\n    background: #e2ebf6;\r\n    box-shadow: 5px 5px 6px #d0d8e2, -5px -5px 6px #f4feff;\r\n  }\r\n  .errors {\r\n    font-size: 13px;\r\n    font-family: \"Noto Sans\", sans-serif;\r\n    text-transform: capitalize;\r\n    color: red;\r\n  }\r\n`;\r\n\r\nfunction AddForm(props) {\r\n  const onSubmit = (data, e) => {\r\n    e.target.reset();\r\n    props.addUser(data);\r\n  };\r\n\r\n  const { register, errors, handleSubmit } = useForm();\r\n\r\n  return (\r\n    <AddFormStyled>\r\n      <h2>Agregar Tarea</h2>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"input-field\">\r\n          <input\r\n            name=\"task\"\r\n            ref={register({\r\n              required: {\r\n                value: true,\r\n                message: \"tarea requerida\",\r\n              },\r\n              minLength: {\r\n                value: 5,\r\n                message: \"minimo de caracteres 5\",\r\n              },\r\n            })}\r\n          />\r\n          <div className=\"errors\">{errors?.task?.message}</div>\r\n          <label className=\"mylabel\">Tareas</label>\r\n        </div>\r\n        <div className=\"butonsito\">\r\n          <div className=\"inner\"></div>\r\n          <button type=\"submit\">Add</button>\r\n        </div>\r\n      </form>\r\n    </AddFormStyled>\r\n  );\r\n}\r\n\r\nexport default AddForm;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport edi from \"../img/editar.svg\";\r\nimport cerrar from \"../img/cerrar.svg\";\r\n\r\nconst CardStyled = styled.div`\r\n  width: 150px;\r\n  height: 100px;\r\n  font-family: \"Montserrat\", sans-serif;\r\n  padding: 1em;\r\n  box-sizing: border-box;\r\n  border-bottom: 1px solid #d0deec;\r\n  text-align: center;\r\n  .icons {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin-bottom: 0.5em;\r\n  }\r\n`;\r\n\r\nfunction Card(props) {\r\n  return (\r\n    <CardStyled>\r\n      <div className=\"icons\">\r\n        <span\r\n          onClick={() => {\r\n            props.edition(props.user);\r\n            props.setUserForm(false);\r\n          }}\r\n        >\r\n          <img src={edi} width=\"22\" height=\"22\" alt=\"editar\"></img>\r\n        </span>\r\n\r\n        {props.useForm ? (\r\n          <span onClick={() => props.deleteUser(props.user.id)}>\r\n            <img src={cerrar} width=\"22\" height=\"22\" alt=\"cerrar\"></img>\r\n          </span>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </div>\r\n      <h4>{props.user.task}</h4>\r\n    </CardStyled>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst EditFormStyled = styled.div`\r\n  max-width: 400px;\r\n  margin: auto;\r\n  padding: 2em;\r\n  box-sizing: border-box;\r\n  box-shadow: 9px 9px 18px #cbd4dd, -9px -9px 18px #f9ffff;\r\n  h2 {\r\n    font-family: \"Montserrat\", sans-serif;\r\n    text-align: center;\r\n    margin-bottom: 20px;\r\n    text-transform: capitalize;\r\n    color: #9badbf;\r\n  }\r\n  .input-field,\r\n  .butonsito {\r\n    position: relative;\r\n    height: 50px;\r\n    width: 100%;\r\n  }\r\n  .input-field {\r\n    margin-bottom: 20px;\r\n  }\r\n  .input-field input {\r\n    border: none;\r\n    padding-left: 15px;\r\n    height: 100%;\r\n    width: 100%;\r\n    outline: 0px;\r\n    background: #e2ebf6;\r\n    box-shadow: inset 5px 5px 6px #d0d8e2, inset -5px -5px 6px #f4feff;\r\n  }\r\n  .mylabel {\r\n    position: absolute;\r\n    top: 30%;\r\n    left: 15px;\r\n    pointer-events: none;\r\n    transform: translateY(-35px);\r\n    font-family: \"Noto Sans\", sans-serif;\r\n    font-size: 13px;\r\n    color: #9badbf;\r\n  }\r\n\r\n  button {\r\n    width: 100%;\r\n    height: 100%;\r\n    border: none;\r\n    color: #87a6cb;\r\n    cursor: pointer;\r\n    background: none;\r\n    font-family: \"Montserrat\", sans-serif;\r\n    font-size: 20px;\r\n    background: #e2ebf6;\r\n    box-shadow: 5px 5px 6px #d0d8e2, -5px -5px 6px #f4feff;\r\n  }\r\n  .errors {\r\n    font-size: 13px;\r\n    font-family: \"Noto Sans\", sans-serif;\r\n    text-transform: capitalize;\r\n    color: red;\r\n  }\r\n`;\r\n\r\nfunction EditForm(props) {\r\n  const onSubmit = (data, e) => {\r\n    data.id = props.currentUser.id;\r\n    props.updateUser(data);\r\n    e.target.reset();\r\n    props.setUserForm(true);\r\n  };\r\n\r\n  const { register, errors, handleSubmit, setValue } = useForm({\r\n    defaultValues: props.currentUser,\r\n  });\r\n\r\n  setValue(\"task\", props.currentUser.task);\r\n\r\n  return (\r\n    <EditFormStyled>\r\n      <h2>Editar Tarea</h2>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <div className=\"input-field\">\r\n          <input\r\n            name=\"task\"\r\n            ref={register({\r\n              required: {\r\n                value: true,\r\n                message: \"tarea requerida\",\r\n              },\r\n              minLength: {\r\n                value: 5,\r\n                message: \"minimo de caracteres 5\",\r\n              },\r\n            })}\r\n          />\r\n          <div className=\"errors\">{errors?.task?.message}</div>\r\n          <label className=\"mylabel\">Tareas</label>\r\n        </div>\r\n        <div className=\"butonsito\">\r\n          <button type=\"submit\">Edit</button>\r\n        </div>\r\n      </form>\r\n    </EditFormStyled>\r\n  );\r\n}\r\n\r\nexport default EditForm;\r\n","import React, { useState } from \"react\";\r\nimport AddForm from \"./addForm\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Card from \"./card\";\r\nimport styled from \"styled-components\";\r\nimport EditForm from \"./editForm\";\r\n\r\nconst ShowCardStyled = styled.div`\r\n  padding: 2em;\r\n  .wrapper {\r\n    max-width: 500px;\r\n    margin: auto;\r\n    padding: 2.5em 0;\r\n  }\r\n  .wrapper-grid {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    gap: 20px 20px;\r\n  }\r\n  .element {\r\n  }\r\n`;\r\n\r\nconst usersData = [\r\n  { id: uuidv4(), task: \"estudiar\" },\r\n  { id: uuidv4(), task: \"comer\" },\r\n  { id: uuidv4(), task: \"trabajar\" },\r\n];\r\n\r\nfunction ShowCard() {\r\n  const [users, setUsers] = useState(usersData);\r\n  const [useForm, setUserForm] = useState(true);\r\n  const [currentUser, setCurrentUser] = useState({\r\n    id: null,\r\n    task: \"\",\r\n  });\r\n\r\n  function deleteUser(id) {\r\n    const deleteById = users.filter((user) => user.id !== id);\r\n\r\n    setUsers(deleteById);\r\n  }\r\n  const addUser = (data) => {\r\n    data.id = uuidv4();\r\n    setUsers([...users, data]);\r\n  };\r\n\r\n  const updateUser = (dataEdit) => {\r\n    const userEdit = users.map((user) =>\r\n      user.id === dataEdit.id ? dataEdit : user\r\n    );\r\n    setUsers(userEdit);\r\n  };\r\n  const edition = (user) => {\r\n    setCurrentUser({ id: user.id, task: user.task });\r\n  };\r\n\r\n  return (\r\n    <ShowCardStyled>\r\n      {useForm ? (\r\n        <AddForm addUser={addUser} />\r\n      ) : (\r\n        <EditForm\r\n          currentUser={currentUser}\r\n          updateUser={updateUser}\r\n          setUserForm={setUserForm}\r\n        />\r\n      )}\r\n\r\n      <div className=\"wrapper\">\r\n        <div className=\"wrapper-grid\">\r\n          {users.map((user) => (\r\n            <div className=\"element\" key={user.id}>\r\n              <Card\r\n                id={user.id}\r\n                user={user}\r\n                edition={edition}\r\n                deleteUser={deleteUser}\r\n                setUserForm={setUserForm}\r\n                useForm={useForm}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </ShowCardStyled>\r\n  );\r\n}\r\n\r\nexport default ShowCard;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport AddForm from \"./component/container/addForm\";\nimport ShowCard from \"./component/container/showCard\";\n\nconst AppStyled = styled.div``;\n\nfunction App() {\n  return (\n    <AppStyled>\n      <ShowCard></ShowCard>\n    </AppStyled>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}